

# Image URL to use all building/pushing image targets
REGISTRY = public.ecr.aws/l8m2k1n1/netapp/wave-operator
IMG ?= ${REGISTRY}:${VERSION}
LATEST = ${REGISTRY}:latest

CRD_OPTIONS ?= "crd:crdVersions=v1,preserveUnknownFields=false"

# Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
ifeq (,$(shell go env GOBIN))
GOBIN=$(shell go env GOPATH)/bin
else
GOBIN=$(shell go env GOBIN)
endif

all: manager

.PHONY: version

version:  ## set VERSION file
	$Q echo ${BUILD_DATE} ${VERSION}
	$Q echo ${VERSION} > VERSION

test: generate fmt vet manifests mocks  ## Run tests
	go test ./... -coverprofile cover.out

mocks:  ## Generate test mock code
	mockgen -source=install/installer.go -destination controllers/internal/mock_install/installer_mock.go
	mockgen -source=cloudstorage/storage.go -destination controllers/internal/mock_cloudstorage/storage_mock.go
	mockgen -source=internal/sparkapi/client/transport/client.go -destination internal/sparkapi/client/transport/mock_transport/client_mock.go
	mockgen -source=internal/sparkapi/client/client.go -destination internal/sparkapi/client/mock_client/client_mock.go
	mockgen -source=internal/sparkapi/manager.go -destination internal/sparkapi/mock_sparkapi/manager_mock.go

manager: generate fmt vet  ## Build manager binary
	go build \
 	 -ldflags "-X github.com/spotinst/wave-operator/internal/version.BuildVersion=${VERSION} -X github.com/spotinst/wave-operator/internal/version.BuildDate=${BUILD_DATE}" \
     -o bin/manager main.go

tide: manifests generate box fmt vet  ## Build tide binary
	go build \
	-ldflags "-X github.com/spotinst/wave-operator/internal/version.BuildVersion=${VERSION} -X github.com/spotinst/wave-operator/internal/version.BuildDate=${BUILD_DATE}" \
	-o bin/tide cmd/tide/main.go

box: ## generate embedded wavecomponents and crd files
	@$(GO) generate github.com/spotinst/wave-operator/internal/tide/...

run: generate fmt vet manifests  ## Run against the configured Kubernetes cluster in ~/.kube/config
	go run \
	  -ldflags "-X github.com/spotinst/wave-operator/internal/version.BuildVersion=${VERSION} -X github.com/spotinst/wave-operator/internal/version.BuildDate=${BUILD_DATE}" \
	  ./main.go


install: manifests  ## Install CRDs into a cluster
	kustomize build config/crd | kubectl apply -f -


uninstall: manifests  ## Uninstall CRDs from a cluster
	kustomize build config/crd | kubectl delete -f -


deploy: manifests  ## Deploy controller in the configured Kubernetes cluster in ~/.kube/config
	cd config/manager && kustomize edit set image controller=${IMG}
	kustomize build config/default | kubectl apply -f -


manifests: controller-gen  ## Generate manifests e.g. CRD, RBAC etc.
	$(CONTROLLER_GEN) $(CRD_OPTIONS) rbac:roleName=manager-role webhook paths="./..." output:crd:artifacts:config=config/crd/bases
	# $(CONTROLLER_GEN) $(CRD_OPTIONS) paths="./..." output:crd:artifacts:config=helm/wave-operator/templates/


fmt:  ## Run go fmt against code
	go fmt ./...


vet:  ## Run go vet against code
	go vet ./...


generate: controller-gen  ## Generate code
	$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."


docker-build: test version ## Build the docker image
	docker build . -t ${IMG}
	docker tag ${IMG} ${LATEST}


docker-push:  ## Push the docker image
	docker push ${IMG}
	docker push ${LATEST}


# download controller-gen if necessary
controller-gen:  ## find or download controller-gen
ifeq (, $(shell which controller-gen))
	@{ \
	set -e ;\
	CONTROLLER_GEN_TMP_DIR=$$(mktemp -d) ;\
	cd $$CONTROLLER_GEN_TMP_DIR ;\
	go mod init tmp ;\
	go get sigs.k8s.io/controller-tools/cmd/controller-gen@v0.3.0 ;\
	rm -rf $$CONTROLLER_GEN_TMP_DIR ;\
	}
CONTROLLER_GEN=$(GOBIN)/controller-gen
else
CONTROLLER_GEN=$(shell which controller-gen)
endif
