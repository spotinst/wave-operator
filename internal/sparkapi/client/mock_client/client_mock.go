// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sparkapi/client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	gomock "github.com/golang/mock/gomock"
	client "github.com/spotinst/wave-operator/internal/sparkapi/client"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetApplication mocks base method
func (m *MockClient) GetApplication(applicationID string) (*client.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", applicationID)
	ret0, _ := ret[0].(*client.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication
func (mr *MockClientMockRecorder) GetApplication(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockClient)(nil).GetApplication), applicationID)
}

// GetEnvironment mocks base method
func (m *MockClient) GetEnvironment(applicationID string) (*client.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironment", applicationID)
	ret0, _ := ret[0].(*client.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironment indicates an expected call of GetEnvironment
func (mr *MockClientMockRecorder) GetEnvironment(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironment", reflect.TypeOf((*MockClient)(nil).GetEnvironment), applicationID)
}

// GetStages mocks base method
func (m *MockClient) GetStages(applicationID string) ([]client.Stage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStages", applicationID)
	ret0, _ := ret[0].([]client.Stage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStages indicates an expected call of GetStages
func (mr *MockClientMockRecorder) GetStages(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStages", reflect.TypeOf((*MockClient)(nil).GetStages), applicationID)
}

// GetAllExecutors mocks base method
func (m *MockClient) GetAllExecutors(applicationID string) ([]client.Executor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExecutors", applicationID)
	ret0, _ := ret[0].([]client.Executor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExecutors indicates an expected call of GetAllExecutors
func (mr *MockClientMockRecorder) GetAllExecutors(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExecutors", reflect.TypeOf((*MockClient)(nil).GetAllExecutors), applicationID)
}

// GetStreamingStatistics mocks base method
func (m *MockClient) GetStreamingStatistics(applicationID string) (*client.StreamingStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStreamingStatistics", applicationID)
	ret0, _ := ret[0].(*client.StreamingStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStreamingStatistics indicates an expected call of GetStreamingStatistics
func (mr *MockClientMockRecorder) GetStreamingStatistics(applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStreamingStatistics", reflect.TypeOf((*MockClient)(nil).GetStreamingStatistics), applicationID)
}
