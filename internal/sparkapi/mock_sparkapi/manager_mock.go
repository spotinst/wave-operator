// Code generated by MockGen. DO NOT EDIT.
// Source: internal/sparkapi/manager.go

// Package mock_sparkapi is a generated GoMock package.
package mock_sparkapi

import (
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	sparkapi "github.com/spotinst/wave-operator/internal/sparkapi"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// GetApplicationInfo mocks base method
func (m *MockManager) GetApplicationInfo(applicationID string, metricsAggregationState sparkapi.StageMetricsAggregatorState, log logr.Logger) (*sparkapi.ApplicationInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationInfo", applicationID, metricsAggregationState, log)
	ret0, _ := ret[0].(*sparkapi.ApplicationInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationInfo indicates an expected call of GetApplicationInfo
func (mr *MockManagerMockRecorder) GetApplicationInfo(applicationID, metricsAggregationState, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationInfo", reflect.TypeOf((*MockManager)(nil).GetApplicationInfo), applicationID, metricsAggregationState, log)
}
