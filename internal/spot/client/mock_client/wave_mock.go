// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spotinst/wave-operator/internal/spot/client (interfaces: WaveClient)

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/spotinst/wave-operator/api/v1alpha1"
	reflect "reflect"
)

// MockWaveClient is a mock of WaveClient interface
type MockWaveClient struct {
	ctrl     *gomock.Controller
	recorder *MockWaveClientMockRecorder
}

// MockWaveClientMockRecorder is the mock recorder for MockWaveClient
type MockWaveClientMockRecorder struct {
	mock *MockWaveClient
}

// NewMockWaveClient creates a new mock instance
func NewMockWaveClient(ctrl *gomock.Controller) *MockWaveClient {
	mock := &MockWaveClient{ctrl: ctrl}
	mock.recorder = &MockWaveClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWaveClient) EXPECT() *MockWaveClientMockRecorder {
	return m.recorder
}

// GetSparkApplication mocks base method
func (m *MockWaveClient) GetSparkApplication(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparkApplication", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparkApplication indicates an expected call of GetSparkApplication
func (mr *MockWaveClientMockRecorder) GetSparkApplication(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparkApplication", reflect.TypeOf((*MockWaveClient)(nil).GetSparkApplication), arg0, arg1)
}

// SaveSparkApplication mocks base method
func (m *MockWaveClient) SaveSparkApplication(arg0 *v1alpha1.SparkApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSparkApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSparkApplication indicates an expected call of SaveSparkApplication
func (mr *MockWaveClientMockRecorder) SaveSparkApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSparkApplication", reflect.TypeOf((*MockWaveClient)(nil).SaveSparkApplication), arg0)
}
