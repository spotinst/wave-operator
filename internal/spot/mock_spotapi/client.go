// Code generated by MockGen. DO NOT EDIT.
// Source: internal/spot/client.go

// Package mock_spot is a generated GoMock package.
package mock_spot

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/spotinst/wave-operator/api/v1alpha1"
	reflect "reflect"
)

// MockApplicationClient is a mock of ApplicationClient interface
type MockApplicationClient struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationClientMockRecorder
}

// MockApplicationClientMockRecorder is the mock recorder for MockApplicationClient
type MockApplicationClientMockRecorder struct {
	mock *MockApplicationClient
}

// NewMockApplicationClient creates a new mock instance
func NewMockApplicationClient(ctrl *gomock.Controller) *MockApplicationClient {
	mock := &MockApplicationClient{ctrl: ctrl}
	mock.recorder = &MockApplicationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationClient) EXPECT() *MockApplicationClientMockRecorder {
	return m.recorder
}

// GetSparkApplication mocks base method
func (m *MockApplicationClient) GetSparkApplication(ctx context.Context, ID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparkApplication", ctx, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparkApplication indicates an expected call of GetSparkApplication
func (mr *MockApplicationClientMockRecorder) GetSparkApplication(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparkApplication", reflect.TypeOf((*MockApplicationClient)(nil).GetSparkApplication), ctx, ID)
}

// SaveApplication mocks base method
func (m *MockApplicationClient) SaveApplication(app *v1alpha1.SparkApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveApplication indicates an expected call of SaveApplication
func (mr *MockApplicationClientMockRecorder) SaveApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveApplication", reflect.TypeOf((*MockApplicationClient)(nil).SaveApplication), app)
}

// MockApplicationGetter is a mock of ApplicationGetter interface
type MockApplicationGetter struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationGetterMockRecorder
}

// MockApplicationGetterMockRecorder is the mock recorder for MockApplicationGetter
type MockApplicationGetterMockRecorder struct {
	mock *MockApplicationGetter
}

// NewMockApplicationGetter creates a new mock instance
func NewMockApplicationGetter(ctrl *gomock.Controller) *MockApplicationGetter {
	mock := &MockApplicationGetter{ctrl: ctrl}
	mock.recorder = &MockApplicationGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationGetter) EXPECT() *MockApplicationGetterMockRecorder {
	return m.recorder
}

// GetSparkApplication mocks base method
func (m *MockApplicationGetter) GetSparkApplication(ctx context.Context, ID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSparkApplication", ctx, ID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSparkApplication indicates an expected call of GetSparkApplication
func (mr *MockApplicationGetterMockRecorder) GetSparkApplication(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSparkApplication", reflect.TypeOf((*MockApplicationGetter)(nil).GetSparkApplication), ctx, ID)
}

// MockApplicationSaver is a mock of ApplicationSaver interface
type MockApplicationSaver struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationSaverMockRecorder
}

// MockApplicationSaverMockRecorder is the mock recorder for MockApplicationSaver
type MockApplicationSaverMockRecorder struct {
	mock *MockApplicationSaver
}

// NewMockApplicationSaver creates a new mock instance
func NewMockApplicationSaver(ctrl *gomock.Controller) *MockApplicationSaver {
	mock := &MockApplicationSaver{ctrl: ctrl}
	mock.recorder = &MockApplicationSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApplicationSaver) EXPECT() *MockApplicationSaverMockRecorder {
	return m.recorder
}

// SaveApplication mocks base method
func (m *MockApplicationSaver) SaveApplication(app *v1alpha1.SparkApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveApplication", app)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveApplication indicates an expected call of SaveApplication
func (mr *MockApplicationSaverMockRecorder) SaveApplication(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveApplication", reflect.TypeOf((*MockApplicationSaver)(nil).SaveApplication), app)
}
