// Code generated by MockGen. DO NOT EDIT.
// Source: install/installer.go

// Package mock_install is a generated GoMock package.
package mock_install

import (
	gomock "github.com/golang/mock/gomock"
	v1alpha1 "github.com/spotinst/wave-operator/api/v1alpha1"
	install "github.com/spotinst/wave-operator/install"
	reflect "reflect"
)

// MockInstaller is a mock of Installer interface
type MockInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerMockRecorder
}

// MockInstallerMockRecorder is the mock recorder for MockInstaller
type MockInstallerMockRecorder struct {
	mock *MockInstaller
}

// NewMockInstaller creates a new mock instance
func NewMockInstaller(ctrl *gomock.Controller) *MockInstaller {
	mock := &MockInstaller{ctrl: ctrl}
	mock.recorder = &MockInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstaller) EXPECT() *MockInstallerMockRecorder {
	return m.recorder
}

// GetReleaseName mocks base method
func (m *MockInstaller) GetReleaseName(chartName string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReleaseName", chartName)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetReleaseName indicates an expected call of GetReleaseName
func (mr *MockInstallerMockRecorder) GetReleaseName(chartName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReleaseName", reflect.TypeOf((*MockInstaller)(nil).GetReleaseName), chartName)
}

// Install mocks base method
func (m *MockInstaller) Install(name, repository, version, values string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", name, repository, version, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install
func (mr *MockInstallerMockRecorder) Install(name, repository, version, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockInstaller)(nil).Install), name, repository, version, values)
}

// Get mocks base method
func (m *MockInstaller) Get(name string) (*install.Installation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(*install.Installation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockInstallerMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstaller)(nil).Get), name)
}

// Upgrade mocks base method
func (m *MockInstaller) Upgrade(name, repository, version, values string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upgrade", name, repository, version, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upgrade indicates an expected call of Upgrade
func (mr *MockInstallerMockRecorder) Upgrade(name, repository, version, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockInstaller)(nil).Upgrade), name, repository, version, values)
}

// IsUpgrade mocks base method
func (m *MockInstaller) IsUpgrade(comp *v1alpha1.WaveComponent, i *install.Installation) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrade", comp, i)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUpgrade indicates an expected call of IsUpgrade
func (mr *MockInstallerMockRecorder) IsUpgrade(comp, i interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrade", reflect.TypeOf((*MockInstaller)(nil).IsUpgrade), comp, i)
}

// Delete mocks base method
func (m *MockInstaller) Delete(name, repository, version, values string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", name, repository, version, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockInstallerMockRecorder) Delete(name, repository, version, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstaller)(nil).Delete), name, repository, version, values)
}
